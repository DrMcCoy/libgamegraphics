/**
 * @file   test-img-pcx-1b4p.cpp
 * @brief  Test code for PCX file handler (with EGA planar image data.)
 *
 * Copyright (C) 2010-2011 Adam Nielsen <malvineous@shikadi.net>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <camoto/gamegraphics/image.hpp>
#include "../src/img-pcx.hpp"

using namespace camoto::gamegraphics;
using namespace camoto;

#define PCX_PAL \
	"\x00\x00\x00" \
	"\x00\x00\xAA" \
	"\x00\xAA\x00" \
	"\x00\xAA\xAA" \
	"\xAA\x00\x00" \
	"\xAA\x00\xAA" \
	"\xAA\x55\x00" \
	"\xAA\xAA\xAA" \
	"\x55\x55\x55" \
	"\x55\x55\xFF" \
	"\x55\xFF\x55" \
	"\x55\xFF\xFF" \
	"\xFF\x55\x55" \
	"\xFF\x55\xFF" \
	"\xFF\xFF\x55" \
	"\xFF\xFF\xFF"

#define PCX_PAD \
	"\x00\x00\x00\x00\x00\x00" \
	"\x00\x00\x00\x00\x00\x00" \
	"\x00\x00\x00\x00\x00\x00" \
	"\x00\x00\x00\x00\x00\x00" \
	"\x00\x00\x00\x00\x00\x00" \
	"\x00\x00\x00\x00\x00\x00" \
	"\x00\x00\x00\x00\x00\x00" \
	"\x00\x00\x00\x00\x00\x00" \
	"\x00\x00\x00\x00\x00\x00"

#define TESTDATA_INITIAL_8x8 \
	"\x0A\x05\x01" \
	"\x01" \
	"\x00\x00" "\x00\x00" "\x07\x00" "\x07\x00" \
	"\x4B\x00" "\x4B\x00" \
	PCX_PAL \
	"\x00" \
	"\x04" \
	"\x02\x00" "\x01\x00" \
	"\x00\x00" "\x00\x00" \
	PCX_PAD \
	"\xC8\xFF" \
	"\x00\x00\x01\x01\x80\x80\x81\x81" \
	"\x00\x00\x01\x01\x80\x80\x81\x81" \
	"\x00\x00\x01\x01\x80\x80\x81\x81" \
	"\x00\x00\x01\x01\x80\x80\x81\x81" \
	"\x00\x00\x01\x01\x80\x80\x81\x81" \
	"\x00\x00\x01\x01\x80\x80\x81\x81" \
	"\x7E\x7E\x01\x01\x80\x80\xC2\xFF"

#define TESTDATA_INITIAL_16x16 \
	"\x0A\x05\x01" \
	"\x01" \
	"\x00\x00" "\x00\x00" "\x0F\x00" "\x0F\x00" \
	"\x4B\x00" "\x4B\x00" \
	PCX_PAL \
	"\x00" \
	"\x04" \
	"\x02\x00" "\x01\x00" \
	"\x00\x00" "\x00\x00" \
	PCX_PAD \
	"\xC8\xFF" \
	"\xC3\x00"     "\x01" "\x80\x00" "\x80\x01" \
	"\xC3\x00"     "\x01" "\x80\x00" "\x80\x01" \
	"\xC3\x00"     "\x01" "\x80\x00" "\x80\x01" \
	"\xC3\x00"     "\x01" "\x80\x00" "\x80\x01" \
	"\xC3\x00"     "\x01" "\x80\x00" "\x80\x01" \
	"\xC3\x00"     "\x01" "\x80\x00" "\x80\x01" \
	"\xC3\x00"     "\x01" "\x80\x00" "\x80\x01" \
	"\xC3\x00"     "\x01" "\x80\x00" "\x80\x01" \
	"\xC3\x00"     "\x01" "\x80\x00" "\x80\x01" \
	"\xC3\x00"     "\x01" "\x80\x00" "\x80\x01" \
	"\xC3\x00"     "\x01" "\x80\x00" "\x80\x01" \
	"\xC3\x00"     "\x01" "\x80\x00" "\x80\x01" \
	"\xC3\x00"     "\x01" "\x80\x00" "\x80\x01" \
	"\xC3\x00"     "\x01" "\x80\x00" "\x80\x01" \
	"\x7F\xC1\xFE" "\x00\x01" "\x80\x00" "\xC2\xFF"

#define TESTDATA_INITIAL_9x9 \
	"\x0A\x05\x01" \
	"\x01" \
	"\x00\x00" "\x00\x00" "\x08\x00" "\x08\x00" \
	"\x4B\x00" "\x4B\x00" \
	PCX_PAL \
	"\x00" \
	"\x04" \
	"\x02\x00" "\x01\x00" \
	"\x00\x00" "\x00\x00" \
	PCX_PAD \
	"\xC8\xFF" \
	"\xC3\x00"     "\x80" "\x80\x00" "\x80\x80" \
	"\xC3\x00"     "\x80" "\x80\x00" "\x80\x80" \
	"\xC3\x00"     "\x80" "\x80\x00" "\x80\x80" \
	"\xC3\x00"     "\x80" "\x80\x00" "\x80\x80" \
	"\xC3\x00"     "\x80" "\x80\x00" "\x80\x80" \
	"\xC3\x00"     "\x80" "\x80\x00" "\x80\x80" \
	"\xC3\x00"     "\x80" "\x80\x00" "\x80\x80" \
	"\x7F\x7F" "\x00\x80" "\x80\x00" "\xC2\xFF"

#define TESTDATA_INITIAL_8x4 \
	"\x0A\x05\x01" \
	"\x01" \
	"\x00\x00" "\x00\x00" "\x07\x00" "\x03\x00" \
	"\x4B\x00" "\x4B\x00" \
	PCX_PAL \
	"\x00" \
	"\x04" \
	"\x02\x00" "\x01\x00" \
	"\x00\x00" "\x00\x00" \
	PCX_PAD \
	"\xC8\xFF" /* use same byte for padding (instead of 0x00) to help RLE */ \
	"\x00\x00\x01\x01\x80\x80\x81\x81" \
	"\x00\x00\x01\x01\x80\x80\x81\x81" \
	"\x7E\x7E\x01\x01\x80\x80\xC2\xFF"

#define IMG_TYPE "img-pcx-1b4p"
#define IMG_CLASS img_pcx_1b4p
#include "test-img.hpp"

#define TESTDATA_INITIAL_8x8_BADRLE \
	"\x0A\x05\x01" \
	"\x01" \
	"\x00\x00" "\x00\x00" "\x07\x00" "\x07\x00" \
	"\x4B\x00" "\x4B\x00" \
	PCX_PAL \
	"\x00" \
	"\x04" \
	"\x02\x00" "\x01\x00" \
	"\x00\x00" "\x00\x00" \
	PCX_PAD \
	"\xC8\xFF" \
	"\x00\x00\x01\x01\x80\x80\x81\x81" \
	"\x00\x00\x01\x01\x80\x80\x81\x81" \
	"\x00\x00\x01\x01\x80\x80\x81\x81" \
	"\x00\x00\x01\x01\x80\x80\x81\x81" \
	"\x00\x00\x01\x01\x80\x80\x81\x81" \
	"\x00\x00\x01\x01\x80\x80\x81\x81" \
	"\x7E\x7E\x01\x01\x80\x80\xC2\xFF\xC0"

// Some special tests

BOOST_FIXTURE_TEST_SUITE(SUITE_NAME, FIXTURE_NAME)

BOOST_AUTO_TEST_CASE(TEST_NAME(to_standard_bad_rle))
{
	BOOST_TEST_MESSAGE("Converting img-pcx-1b4p to stdformat with bad RLE code");

	boost::shared_ptr<std::string> d(new std::string(makeString(TESTDATA_INITIAL_8x8_BADRLE)));
	this->base->open(d);
	this->openImage(8, 8);

	StdImageDataPtr output = this->img->toStandard();

	BOOST_CHECK_MESSAGE(
		default_sample::is_equal(
			makeString(stdformat_test_image_8x8),
			std::string((const char *)output.get(), 8 * 8),
			8
		),
		"Error converting image with bad RLE code to standard format"
	);
}

#define TESTDATA_INITIAL_8x8_TRUNCATED \
	"\x0A\x05\x01" \
	"\x01" \
	"\x00\x00" "\x00\x00" "\x07\x00" "\x07\x00" \
	"\x4B\x00" "\x4B\x00" \
	PCX_PAL \
	"\x00" \
	"\x04" \
	"\x02\x00" "\x01\x00" \
	"\x00\x00" "\x00\x00" \
	PCX_PAD \
	"\xC8\xFF" \
	"\x00\x00\x01\x01\x80\x80\x81\x81" \
	"\x00\x00\x01\x01\x80\x80\x81\x81" \
	"\x00\x00\x01\x01\x80\x80\x81\x81" \
	"\x00\x00\x01\x01\x80\x80\x81\x81" \
	"\x00\x00\x01\x01\x80\x80\x81\x81" \
	"\x00\x00\x01\x01\x80\x80\x81\x81" \
	"\x7E\x7E\x01\x01\x80\x80"

const uint8_t stdformat_test_image_8x8_truncated[] = {
	0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F,
	0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A,
	0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A,
	0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A,
	0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A,
	0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A,
	0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A,
	0x04, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02,
	0x00 // terminating null for std::string conversion
};

BOOST_AUTO_TEST_CASE(TEST_NAME(to_standard_truncated))
{
	BOOST_TEST_MESSAGE("Converting truncated img-pcx-1b4p to stdformat");

	boost::shared_ptr<std::string> d(new std::string(makeString(TESTDATA_INITIAL_8x8_TRUNCATED)));
	this->base->open(d);
	this->openImage(8, 8);

	StdImageDataPtr output = this->img->toStandard();

	BOOST_CHECK_MESSAGE(
		default_sample::is_equal(
			makeString(stdformat_test_image_8x8_truncated),
			std::string((const char *)output.get(), 8 * 8),
			8
		),
		"Error converting image with bad RLE code to standard format"
	);
}

BOOST_AUTO_TEST_SUITE_END()

// Test some invalid formats to make sure they're not identified as valid
// files.  Note that they can still be opened though (by 'force'), this
// only checks whether they look like valid files or not.

ISINSTANCE_TEST(c00, TESTDATA_INITIAL_8x8, DefinitelyYes);

// Bad signature
ISINSTANCE_TEST(c01,
	"\x0B\x05\x01"
	"\x01"
	"\x00\x00" "\x00\x00" "\x07\x00" "\x07\x00"
	"\x4B\x00" "\x4B\x00"
	PCX_PAL
	"\x00"
	"\x04"
	"\x02\x00" "\x01\x00"
	"\x00\x00" "\x00\x00"
	PCX_PAD
	"\xC8\xFF"
	"\x00\x00\x01\x01\x80\x80\x81\x81"
	"\x00\x00\x01\x01\x80\x80\x81\x81"
	"\x00\x00\x01\x01\x80\x80\x81\x81"
	"\x00\x00\x01\x01\x80\x80\x81\x81"
	"\x00\x00\x01\x01\x80\x80\x81\x81"
	"\x00\x00\x01\x01\x80\x80\x81\x81"
	"\x7E\x7E\x01\x01\x80\x80\xC2\xFF",
	DefinitelyNo
);

// Unsupported version
ISINSTANCE_TEST(c02,
	"\x0A\x06\x01"
	"\x01"
	"\x00\x00" "\x00\x00" "\x07\x00" "\x07\x00"
	"\x4B\x00" "\x4B\x00"
	PCX_PAL
	"\x00"
	"\x04"
	"\x02\x00" "\x01\x00"
	"\x00\x00" "\x00\x00"
	PCX_PAD
	"\xC8\xFF"
	"\x00\x00\x01\x01\x80\x80\x81\x81"
	"\x00\x00\x01\x01\x80\x80\x81\x81"
	"\x00\x00\x01\x01\x80\x80\x81\x81"
	"\x00\x00\x01\x01\x80\x80\x81\x81"
	"\x00\x00\x01\x01\x80\x80\x81\x81"
	"\x00\x00\x01\x01\x80\x80\x81\x81"
	"\x7E\x7E\x01\x01\x80\x80\xC2\xFF",
	DefinitelyNo
);

// Wrong bits-per-plane
ISINSTANCE_TEST(c03,
	"\x0A\x05\x01"
	"\x09"
	"\x00\x00" "\x00\x00" "\x07\x00" "\x07\x00"
	"\x4B\x00" "\x4B\x00"
	PCX_PAL
	"\x00"
	"\x04"
	"\x02\x00" "\x01\x00"
	"\x00\x00" "\x00\x00"
	PCX_PAD
	"\xC8\xFF"
	"\x00\x00\x01\x01\x80\x80\x81\x81"
	"\x00\x00\x01\x01\x80\x80\x81\x81"
	"\x00\x00\x01\x01\x80\x80\x81\x81"
	"\x00\x00\x01\x01\x80\x80\x81\x81"
	"\x00\x00\x01\x01\x80\x80\x81\x81"
	"\x00\x00\x01\x01\x80\x80\x81\x81"
	"\x7E\x7E\x01\x01\x80\x80\xC2\xFF",
	DefinitelyNo
);

// Wrong plane count
ISINSTANCE_TEST(c04,
	"\x0A\x05\x01"
	"\x01"
	"\x00\x00" "\x00\x00" "\x07\x00" "\x07\x00"
	"\x4B\x00" "\x4B\x00"
	PCX_PAL
	"\x00"
	"\x09"
	"\x02\x00" "\x01\x00"
	"\x00\x00" "\x00\x00"
	PCX_PAD
	"\xC8\xFF"
	"\x00\x00\x01\x01\x80\x80\x81\x81"
	"\x00\x00\x01\x01\x80\x80\x81\x81"
	"\x00\x00\x01\x01\x80\x80\x81\x81"
	"\x00\x00\x01\x01\x80\x80\x81\x81"
	"\x00\x00\x01\x01\x80\x80\x81\x81"
	"\x00\x00\x01\x01\x80\x80\x81\x81"
	"\x7E\x7E\x01\x01\x80\x80\xC2\xFF",
	DefinitelyNo
);
