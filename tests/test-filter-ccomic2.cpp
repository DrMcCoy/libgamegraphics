/**
 * @file   test-filter-ccomic2.cpp
 * @brief  Test code for Captain Comic II RLE algorithm.
 *
 * Copyright (C) 2010-2015 Adam Nielsen <malvineous@shikadi.net>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <boost/test/unit_test.hpp>
#include <boost/iostreams/filtering_stream.hpp>
#include <boost/iostreams/copy.hpp>
#include <camoto/util.hpp>

#include "tests.hpp"
#include "test-filter.hpp"
#include "../src/filter-ccomic2.hpp"

using namespace camoto;
using namespace camoto::gamegraphics;

struct ccomic2_compress_sample: public filter_sample {
	ccomic2_compress_sample()
	{
		this->filter.reset(new filter_ccomic2_rle(6));
	}
};

struct ccomic2_decompress_sample: public filter_sample {
	ccomic2_decompress_sample()
	{
		this->filter.reset(new filter_ccomic2_unrle(6));
	}
};

BOOST_FIXTURE_TEST_SUITE(ccomic2_decompress_suite, ccomic2_decompress_sample)

BOOST_AUTO_TEST_CASE(decode)
{
	BOOST_TEST_MESSAGE("Expand some Captain Comic II RLE data");

	in << makeString(
		"\x12\x34\x56\x78\x9A\xBC" // header
		"\x02" "\xAA\xBB"
		"\xFE" "\xCC"
		"\x01" "\xDD"
		"\xFF" "\xEE"
	);

	BOOST_CHECK_MESSAGE(is_equal(makeString(
		"\x12\x34\x56\x78\x9A\xBC" // header
		"\xAA\xBB"
		"\xCC\xCC"
		"\xDD\xEE"
	)),
		"Expanding Captain Comic II RLE data failed");
}

BOOST_AUTO_TEST_SUITE_END()


BOOST_FIXTURE_TEST_SUITE(ccomic2_compress_suite, ccomic2_compress_sample)

BOOST_AUTO_TEST_CASE(encode)
{
	BOOST_TEST_MESSAGE("RLE some data");

	in << makeString(
		"\x12\x34\x56\x78\x9A\xBC" // header
		"\xAA\xBB"
		"\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC"
		"\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC"
		"\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC"
		"\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC"
		"\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC"
		"\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC"
		"\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC"
		"\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC"
		"\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC"
		"\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC"
		"\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC"
		"\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC"
		"\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC"
		"\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC"
		"\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC"
		"\xCC\xCC\xCC\xCC\xCC\xCC"

		"\xDD\xEE"
		"\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC"
		"\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC"
		"\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC"
		"\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC"
		"\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC"
		"\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC"
		"\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC"
		"\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC"
		"\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC"
		"\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC"
		"\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC"
		"\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC"
		"\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC"
		"\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC"
		"\xCC\xCC\xCC\xCC\xCC\xCC\xCC\xCC"
		"\xCC\xCC\xCC\xCC\xCC\xCC"

		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xAA\x99\x88\x77"
	);

	BOOST_CHECK_MESSAGE(is_equal(makeString(
		"\x12\x34\x56\x78\x9A\xBC" // header
		"\x02" "\xAA\xBB"
		"\x82" "\xCC"

		"\x02" "\xDD\xEE"
		"\x82" "\xCC"

		"\x84" "\xBB"
		"\x04" "\xAA\x99\x88\x77"
	)),
		"Encoding RLE data failed");
}

BOOST_AUTO_TEST_CASE(encode2)
{
	BOOST_TEST_MESSAGE("RLE some data");

	in << makeString(
		"\x12\x34\x56\x78\x9A\xBC" // header
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xAA\x99\xBB\xBB"

		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xAA\x99\x88\x77"
	);

	BOOST_CHECK_MESSAGE(is_equal(makeString(
		"\x12\x34\x56\x78\x9A\xBC" // header
		"\x84" "\xBB"
		"\x02" "\xAA\x99"
		"\x82" "\xBB"
		"\x04" "\xAA\x99\x88\x77"
	)),
		"Encoding RLE data failed");
}

BOOST_AUTO_TEST_CASE(encode3)
{
	BOOST_TEST_MESSAGE("RLE some data");

	in << makeString(
		"\x12\x34\x56\x78\x9A\xBC" // header
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"

		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
		"\xBB\xBB\xBB\xBB\xBB\xBB\xBB\xBB"
	);

	BOOST_CHECK_MESSAGE(is_equal(makeString(
		"\x12\x34\x56\x78\x9A\xBC" // header
		"\x80" "\xBB"

		"\x80" "\xBB"
	)),
		"Encoding RLE data failed");
}

BOOST_AUTO_TEST_CASE(encode4)
{
	BOOST_TEST_MESSAGE("RLE some data");

	in << makeString(
		"\x12\x34\x56\x78\x9A\xBC" // header
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"

		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
	);

	BOOST_CHECK_MESSAGE(is_equal(makeString(
		"\x12\x34\x56\x78\x9A\xBC" // header
		"\x7F"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66"
		"\x7F" "\x77"

		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55"
		"\x02" "\x66\x77"
	)),
		"Encoding RLE data failed");
}

BOOST_AUTO_TEST_CASE(encode5)
{
	BOOST_TEST_MESSAGE("RLE some data");

	in << makeString(
		"\x12\x34\x56\x78\x9A\xBC" // header
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\xAA\xAA"

		"\xAA\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
	);

	BOOST_CHECK_MESSAGE(is_equal(makeString(
		"\x12\x34\x56\x78\x9A\xBC" // header
		"\x7E"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55"
		"\xFD" "\xAA"

		"\x7F"
		"\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
		"\x00\x11\x22\x33\x44\x55\x66\x77"
	)),
		"Encoding RLE data failed");
}
BOOST_AUTO_TEST_SUITE_END()
